@inproceedings{kreps_kafka_2011,
	title = {{K}afka: A distributed messaging system for log processing},
	volume = {11},
	shorttitle = {Kafka},
	pages = {1--7},
	booktitle = {Proceedings of the {NetDB}},
	author = {Kreps, Jay and Narkhede, Neha and Rao, Jun},
	date = {2011},
	keywords = {Apache Kafka, Confluent Schema Registry, Schema Registry, Seminal Work},
	file = {Kreps et al. - Kafka a Distributed Messaging System for Log Proc.pdf:/Users/d067617/Zotero/storage/IHW7MDYA/Kreps et al. - Kafka a Distributed Messaging System for Log Proc.pdf:application/pdf;Full Text:/Users/d067617/Zotero/storage/E6IITQEA/Kreps et al. - 2011 - Kafka A distributed messaging system for log proc.pdf:application/pdf},
}

@online{avro,
	title = {Apache {A}vro™ 1.11.0 Documentation},
	url = {https://avro.apache.org/docs/current/index.html},
	author = {{Apache Software Foundation}},
	urldate = {2022-02-06},
	date = {2021},
}

@online{apache_software_foundation_apache_nodate,
	title = {Apache {K}afka},
	url = {https://kafka.apache.org/},
	abstract = {Apache Kafka: A Distributed Streaming Platform.},
	author = {{Apache Software Foundation}},
	urldate = {2022-02-06},
	langid = {english},
	file = {Snapshot:/Users/d067617/Zotero/storage/5QKTGWV5/kafka.apache.org.html:text/html},
}

@online{fowler_event_sourcing_2005,
	title = {Event Sourcing},
	url = {https://martinfowler.com/eaaDev/EventSourcing.html},
	abstract = {Capture all changes to an application state as a sequence of events.},
	author = {Fowler, Martin},
	urldate = {2022-02-06},
	date = {2005-12-12},
	file = {Snapshot:/Users/d067617/Zotero/storage/DEGA2P2V/EventSourcing.html:text/html},
}

@online{fowler_event_driven_2017,
	title = {What do you mean by “Event-Driven”?},
	url = {https://martinfowler.com/articles/201701-event-driven.html},
	abstract = {Some notes on the different patterns that may be present when people talk about event-driven architectures.},
	author = {Fowler, Martin},
	urldate = {2022-02-06},
	date = {2017-02-07},
	file = {Snapshot:/Users/d067617/Zotero/storage/ZAHHL55Z/201701-event-driven.html:text/html},
}

@online{fowler_cqrs_2011,
	title = {{CQRS}},
	url = {https://martinfowler.com/bliki/CQRS.html},
	abstract = {{CQRS} (Command Query Responsibility Segregation) is the notion that you can use a different model to update information than the model you use to read information},
	author = {Fowler, Martin},
	urldate = {2022-02-06},
	date = {2011-07-17},
	file = {Snapshot:/Users/d067617/Zotero/storage/B4N6ETRM/CQRS.html:text/html},
}

@online{fowler_microservices_2014,
	title = {{M}icroservices},
	url = {https://martinfowler.com/articles/microservices.html},
	abstract = {The term "Microservice Architecture" has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services. While there is no precise definition of this architectural style, there are certain common characteristics around organization around business capability, automated deployment, intelligence in the endpoints, and decentralized control of languages and data.},
	author = {Fowler, Martin and Lewis, James},
	urldate = {2022-02-07},
	date = {2014-03-25},
	file = {Snapshot:/Users/d067617/Zotero/storage/B4N6ETRM/CQRS.html:text/html},
}

@book{stopford_designing_2018,
	title = {Designing Event-Driven Systems},
	abstract = {Many forces affect software today: larger datasets, geographical disparities, complex company structures, and the growing need to be fast and nimble in the face of change. Proven approaches such as service-oriented and event-driven architectures are joined by newer techniques such as microservices, reactive architectures, {DevOps}, and stream processing. Many of these patterns are successful by themselves, but as this practical ebook demonstrates, they provide a more holistic and compelling approach when applied together. Author Ben Stopford explains how service-based architectures and stream processing tools such as Apache Kafka can help you build business-critical systems. You'll learn how to apply patterns including Event Sourcing and {CQRS}, and how to build multi-team systems with microservices and {SOA} using patterns such as "inside out databases" and "event streams as a source of truth." These approaches provide a unique foundation for how these large, autonomous service ecosystems can communicate and share data. Learn why streaming beats request-response based architectures in complex, contemporary use cases Understand why replayable logs such as Kafka provide a backbone for both service communication and shared datasets Explore how event collaboration and event sourcing patterns increase safety and recoverability with functional, event-driven approaches Build service ecosystems that blend event-driven and request-driven interfaces using a replayable log and Kafka's Streams {API} Scale beyond individual teams into larger, department- and company-sized architectures, using event streams as a source of truth.},
	author = {Stopford, Ben},
 	publisher = {OReilly Media, Inc.},
	year = {2018},
	edition = {1st edition},
	ISBN = {978-1-4920-3824-5},
}

@misc{boner_reactive_2014,
	title = {The Reactive Manifesto},
	url = {https://www.reactivemanifesto.org/},
	author = {Bonér, Jonas and Farley, Dave and Kuhn, Roland and Thompson, Martin},
	urldate = {2022-02-10},
	date = {2014-09-16},
	file = {Bonér et al. - 2014 - The Reactive Manifesto.pdf:/Users/d067617/Zotero/storage/7DQMVLD6/Bonér et al. - 2014 - The Reactive Manifesto.pdf:application/pdf},
}

@misc{iso_25010_2011,
	title = {{ISO}/{IEC} 25010:2011},
	shorttitle = {{ISO}/{IEC} 25010},
	abstract = {Systems and software engineering — Systems and software Quality Requirements and Evaluation ({SQuaRE}) — System and software quality models},
	author = {{ISO}},
	urldate = {2022-02-10},
	date = {2011-03},
	langid = {english},
	file = {Snapshot:/Users/d067617/Zotero/storage/MINPXYD3/35733.html:text/html},
}

@misc{beck2001agile,
  author = {Beck, Kent and Beedle, Mike and van Bennekum, Arie and Cockburn, Alistair and Cunningham, Ward and Fowler, Martin and Grenning, James and Highsmith, Jim and Hunt, Andrew and Jeffries, Ron and Kern, Jon and Marick, Brian and Martin, Robert C. and Mellor, Steve and Schwaber, Ken and Sutherland, Jeff and Thomas, Dave},
  title = {Manifesto for Agile Software Development},
  url = {http://www.agilemanifesto.org/},
	urldate = {2022-02-10},
  year = 2001
}

@book{richardson_microservices_2019,
	location = {Shelter Island, New York},
	title = {Microservices Patterns},
	isbn = {978-1-61729-454-9},
	shorttitle = {Microservices patterns},
	abstract = {Successfully developing microservices-based applications requires mastering a new set of architectural insights and practices. In this unique book, microservice architecture pioneer and Java Champion Chris Richardson collects, catalogues, and explains 44 patterns that solve problems such as service decomposition, transaction management, querying, and inter-service communication. "Microservices patterns" teaches you how to develop and deploy production-quality microservices-based applications. This invaluable set of design patterns builds on decades of distributed system experience, adding new patterns for writing services and composing them into systems that scale and perform reliably under real-world conditions. More than just a patterns catalog, this practical guide offers experience-driven advice to help you design, implement, test, and deploy your microservices-based application},
	pagetotal = {490},
	publisher = {Manning Publications},
	author = {Richardson, Chris},
	date = {2019},
	keywords = {Service-oriented architecture (Computer science), Software architecture, Software patterns},
}

@online{loukides_microservice_adoption_2020,
	title={Microservice Adoption in 2020},
	author={Loukides, Mike and Swoyer, Steve},
	date={2020-07-15},
	url={https://www.oreilly.com/radar/microservices-adoption-in-2020/},
	urldate = {2022-02-11},
}

@inproceedings{oki_information_1993,
	title = {The information bus: an architecture for extensible distributed systems},
	shorttitle = {The information bus},
	pages = {58--68},
	booktitle = {Proceedings of the fourteenth {ACM} symposium on Operating systems principles},
	author = {Oki, Brian and Pfluegl, Manfred and Siegel, Alex and Skeen, Dale},
	date = {1993},
	file = {Snapshot:/Users/d067617/Zotero/storage/38TADY9W/168619.html:text/html;Oki et al. - 1993 - The information bus an architecture for extensibl.pdf:/Users/d067617/Zotero/storage/NYVXIHSA/Oki et al. - 1993 - The information bus an architecture for extensibl.pdf:application/pdf},
}

@article{curry_message-oriented_2004,
	title = {Message-oriented middleware},
	pages = {1--28},
	journaltitle = {Middleware for communications},
	author = {Curry, Edward},
	date = {2004},
	note = {Publisher: John Wiley \& Sons},
	file = {Full Text:/Users/d067617/Zotero/storage/RJI5HDSB/Curry - 2004 - Message-oriented middleware.pdf:application/pdf;Snapshot:/Users/d067617/Zotero/storage/GJRZKQQM/books.html:text/html},
}

@inproceedings{banavar_case_1999,
	title = {A case for message oriented middleware},
	pages = {1--17},
	booktitle = {International Symposium on Distributed Computing},
	publisher = {Springer},
	author = {Banavar, Guruduth and Chandra, Tushar and Strom, Robert and Sturman, Daniel},
	date = {1999},
	file = {Snapshot:/Users/d067617/Zotero/storage/VYER9TLW/3-540-48169-9_1.html:text/html;Banavar et al. - 1999 - A case for message oriented middleware.pdf:/Users/d067617/Zotero/storage/WDI3IQ4U/Banavar et al. - 1999 - A case for message oriented middleware.pdf:application/pdf},
}

@book{hohpe_enterprise_2004,
	location = {Boston},
	title = {Enterprise integration patterns: designing, building, and deploying messaging solutions},
	isbn = {978-0-321-20068-6},
	series = {The Addison-Wesley signature series},
	shorttitle = {Enterprise integration patterns},
	pagetotal = {683},
	publisher = {Addison-Wesley},
	author = {Hohpe, Gregor and Woolf, Bobby},
	date = {2004},
	note = {{OCLC}: ocm52901145},
	keywords = {Management information systems, Message processing, Telecommunication},
}

@online{amqp,
	title = {{AMQP} {H}omepage},
	url = {https://www.amqp.org/},
	author = {{OASIS}},
	urldate = {2022-02-11},
	date = {2022},
}

@online{mqtt,
	title = {{MQTT} {H}omepage},
	url = {https://mqtt.org/},
	author = {{MQTT.org}},
	urldate = {2022-02-11},
	date = {2022},
}

@online{rabbitmq,
	title = {{RabbitMQ} {H}omepage},
	url = {https://www.rabbitmq.com/},
	author = {{VMware, Inc.}},
	urldate = {2022-02-11},
	date = {2022},
}

@online{mosquitto,
	title = {{M}osquitto {H}omepage},
	url = {https://mosquitto.org/},
	author = {{Eclipse Foundation, Inc.}},
	urldate = {2022-02-11},
	date = {2022},
}

@online{owl,
	title = {{W}eb {O}ntology {L}anguage {(OWL)}},
	url = {https://www.w3.org/OWL/},
	author = {{W3C}},
	urldate = {2022-02-11},
	date = {2013-12-11},
}

@online{rdf,
	title = {{R}esource {D}escription {F}ramework {(RDF)}},
	url = {https://www.w3.org/RDF/},
	author = {{W3C}},
	urldate = {2022-02-11},
	date = {2014-03-15},
}

@online{protobuf,
	title = {{P}rotocol {B}uffers},
	url = {https://developers.google.com/protocol-buffers},
	author = {{Google}},
	urldate = {2022-02-11},
}

@online{xmlschema,
	title = {{XML} {S}chema},
	url = {https://www.w3.org/2001/XMLSchema},
	author = {{W3C}},
	urldate = {2022-02-11},
	date = {2014-10-15},
}

@online{jsonschema,
	title = {{JSON} {S}chema},
	url = {https://json-schema.org/},
	author = {{json-schema.org}},
	urldate = {2022-02-11},
}

explicitly mention the confluent schema registry

@thesis{auer_distributed_2017,
	title = {Distributed data store for internet of things environments},
	type = {B.Sc. Thesis},
	author = {Auer, Jonas},
	date = {2017},
	keywords = {Apache Kafka, Thesis, Confluent Schema Registry, Schema Registry},
}

@thesis{dessalegn_muruts_multi-tenant_2016,
	title = {Multi-Tenant Apache Kafka for Hops: Kafka Topic-Based Multi-Tenancy and {ACL}-Based Authorization for Hops},
	shorttitle = {Multi-Tenant Apache Kafka for Hops},
	type = {M.Sc. Thesis},
	author = {Dessalegn Muruts, Misganu},
	date = {2016},
}

@thesis{korhonen_using_2019,
	title = {Using Kafka to Build Scalable and Fault Tolerant Systems},
	type = {B.Sc. Thesis},
	author = {Korhonen, Teemu},
	date = {2019},
}

@inproceedings{radchenko_micro-workflows_2018,
	title = {Micro-Workflows: Kafka and Kepler Fusion to Support Digital Twins of Industrial Processes},
	doi = {10.1109/UCC-Companion.2018.00039},
	shorttitle = {Micro-Workflows},
	abstract = {In recent years, we observe an exponential growth of "Smart Industry" concept that relies on the use of software and hardware systems to analyze data from several types of smart sensors by various types of models: mathematical, computational, data, etc. A set of such virtual models, representing processes, systems and equipment is called "Digital Twins" ({DTs}). {DTs} use data gathered from the sensory systems on production lines to predict failures of machinery, optimize the quality of the products, and reduce the ecological footprint from facilities. They can be described as a sequence of jobs that perform required functionality linked together by a set of edges that represent data dependencies. To organize a flexible cloud computing support for the Digital Twin execution, we propose a concept of Micro-Workflows that combines the power of scientific workflows, the flexibility of containers technology, and robustness of the distributed streaming approach.},
	eventtitle = {2018 {IEEE}/{ACM} International Conference on Utility and Cloud Computing Companion ({UCC} Companion)},
	pages = {83--88},
	booktitle = {2018 {IEEE}/{ACM} International Conference on Utility and Cloud Computing Companion ({UCC} Companion)},
	author = {Radchenko, Gleb and Alaasam, Ameer B.A. and Tchernykh, Andrei},
	date = {2018-12},
}

@article{ranjan_radar-base_2019,
	title = {{RADAR}-Base: Open Source Mobile Health Platform for Collecting, Monitoring, and Analyzing Data Using Sensors, Wearables, and Mobile Devices},
	volume = {7},
	url = {https://mhealth.jmir.org/2019/8/e11734},
	doi = {10.2196/11734},
	shorttitle = {{RADAR}-Base},
	abstract = {Background: With a wide range of use cases in both research and clinical domains, collecting continuous mobile health ({mHealth}) streaming data from multiple sources in a secure, highly scalable, and extensible platform is of high interest to the open source {mHealth} community. The European Union Innovative Medicines Initiative Remote Assessment of Disease and Relapse-Central Nervous System ({RADAR}-{CNS}) program is an exemplary project with the requirements to support the collection of high-resolution data at scale; as such, the Remote Assessment of Disease and Relapse ({RADAR})-base platform is designed to meet these needs and additionally facilitate a new generation of {mHealth} projects in this nascent field. Objective: Wide-bandwidth networks, smartphone penetrance, and wearable sensors offer new possibilities for collecting near-real-time high-resolution datasets from large numbers of participants. The aim of this study was to build a platform that would cater for large-scale data collection for remote monitoring initiatives. Key criteria are around scalability, extensibility, security, and privacy. Methods: {RADAR}-base is developed as a modular application; the backend is built on a backbone of the highly successful Confluent/Apache Kafka framework for streaming data. To facilitate scaling and ease of deployment, we use Docker containers to package the components of the platform. {RADAR}-base provides 2 main mobile apps for data collection, a Passive App and an Active App. Other third-Party Apps and sensors are easily integrated into the platform. Management user interfaces to support data collection and enrolment are also provided. Results: General principles of the platform components and design of {RADAR}-base are presented here, with examples of the types of data currently being collected from devices used in {RADAR}-{CNS} projects: Multiple Sclerosis, Epilepsy, and Depression cohorts. Conclusions: {RADAR}-base is a fully functional, remote data collection platform built around Confluent/Apache Kafka and provides off-the-shelf components for projects interested in collecting {mHealth} datasets at scale.},
	pages = {e11734},
	number = {8},
	journaltitle = {{JMIR} {mHealth} and {uHealth}},
	author = {Ranjan, Yatharth and Rashid, Zulqarnain and Stewart, Callum and Conde, Pauline and Begale, Mark and Verbeeck, Denny and Boettcher, Sebastian and Hyve, The and Dobson, Richard and Folarin, Amos and Consortium, The {RADAR}-{CNS}},
	urldate = {2021-11-07},
	date = {2019-08-01},
}

do not specify which schema registry they use

@article{g_b_high_2021,
	title = {High Resilient Messaging Service for Microservice Architecture},
	volume = {16},
	issn = {0973-9769, 0973-4562},
	url = {http://ripublication.com/ijaer21/ijaerv16n5_04.pdf},
	doi = {10.37622/IJAER/16.5.2021.357-361},
	abstract = {Fundamental structure of a software system is called software architecture. Software architectures are helpful in systematic software development. One such software architecture is microservice architecture. This architecture breaks down the entire software system into smaller components each of which work independently. The microservice architecture is being widely adapted in software industries due to its reliability, scalability and easier maintenance. But breaking down a system into smaller, independent components that use different tech stacks and message formats gives rise to complex communication between the components. This paper proposes a new messaging service that allows communication between services with ease. The new messaging service uses distributed streaming platforms like Apache Kafka to decouple the messaging between services. It also uses Apache Camel to provide functionalities such as message schema transformation and schema validation; these functionalities allow the services to communicate with each other with only a few lines of code. The result is a new state of the art messaging service that can be easily integrated with producer and consumer services. The paper also discusses where the new messaging service is more suitable. The performance metric used here is the number of additional lines of code required on the producer or consumer side for using this messaging service. The results are, almost thirty percent to sixty percent reduction of code required for integration on the producer side and nine percent to forty percent reduction of code required for integration on the consumer side.},
	pages = {357},
	number = {5},
	journaltitle = {International Journal of Applied Engineering Research},
	author = {G. B., Sanjana and N. S., Girish Rao Salanke},
	urldate = {2021-11-07},
	date = {2021-05-30},
}

@inproceedings{muller_iot_2017,
	title = {{IoT} for All: Architectural design of an extensible and lightweight {IoT} analytics platform},
	shorttitle = {{IoT} for All},
	pages = {11--13},
	booktitle = {Proceedings of the 2017 International Conference on Industrial Engineering and Systems Management ({IESM}), Saarbrücken, Germany},
	author = {Müller, Stephan and Wiener, Patrick and Bürger, Adrian and Nimis, Jens and Bousonville, V. F. T. and Melo, T. and Rezg, N.},
	date = {2017},
}
